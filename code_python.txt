from shutil import *
from PIL import Image,ImageTk
import cv2
import os
import numpy as np
user="1"
folder="1"

def detect():
    user=input("Enter User Registration Number(last 4 digits) :")
    folder=user
    sampleNum = 0
    facecascade = cv2.CascadeClassifier('face.xml')
    eyecascade = cv2.CascadeClassifier('eye.xml')
    camera = cv2.VideoCapture(0)
    count = 0
    while (True):
        ret, frame = camera.read()
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = facecascade.detectMultiScale(gray, 1.3, 5)
        for (x, y, w, h) in faces:
            sampleNum = sampleNum + 1
            img = cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
            f = cv2.resize(gray[y:y + h, x:x + h], (500, 500))
            roi_gray = gray[y:y+h, x:x+w]
            roi_color = img[y:y+h, x:x+w]
            eyes = eyecascade.detectMultiScale(roi_gray)
            for (ex,ey,ew,eh) in eyes:
                cv2.rectangle(roi_color,(ex,ey),(ex+ew,ey+eh),(0,255,0),2)
            cv2.imwrite("Images/" + user + "." + str(folder) + "." + str(sampleNum) + ".jpg", f)
            count += 1
            cv2.waitKey(200)
        cv2.imshow("camera : ", frame)
        cv2.waitKey(1)
        if sampleNum > 25:
            break
    camera.release()
    cv2.destroyAllWindows()

def trainer():
    recogniser = cv2.face.LBPHFaceRecognizer_create()
    path="C:\\Users\\tvisr\\Desktop\\code_initial\\Images"
    def getimageIds(path):
        imagepaths = [os.path.join(path, f) for f in os.listdir(path)]
        faces = []
        Ids = []
        #print(imagepaths)
        for imagepath in imagepaths:
            faceimg = Image.open(imagepath).convert('L')
            facenp = np.array(faceimg, 'uint8')
            #print(os.path.split(imagepath))
            Id = int(os.path.split(imagepath)[-1].split('.')[1])
            faces.append(facenp)
            #print(Id)
            Ids.append(Id)
            cv2.imshow('Training the dataset', facenp)
            cv2.waitKey(150)
        return Ids, faces
    Ids, faces = getimageIds(path)
    recogniser.train(faces, np.array(Ids))
    recogniser.write('recogniser/recogniser_all.yml')
    cv2.destroyAllWindows()

def recognise():
    path ="C:\\Users\\tvisr\\Desktop\\code_initial\\New folder"
    imagepaths = [os.path.join(path, f) for f in os.listdir(path)]
    path ="C:\\Users\\tvisr\\Desktop\\code_initial\\New folder"
    for imagepath in imagepaths:
        ID = int(os.path.split(imagepath)[-1].split('.')[1])
    facecascade = cv2.CascadeClassifier('face.xml')
    eyecascade = cv2.CascadeClassifier('eye.xml')
    rec = cv2.face.LBPHFaceRecognizer_create()
    rec.read('recogniser\\recogniser_all.yml')
    camera = cv2.VideoCapture(0)
    sampleNum = 0
    folder = '0'
    font = cv2.FONT_HERSHEY_DUPLEX
    while (True):
        ret, frame = camera.read()
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = facecascade.detectMultiScale(gray, 1.3, 5)
        for (x, y, w, h) in faces:
            sampleNum = sampleNum + 1
            img = cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
            folder,conf = rec.predict(gray[y:y + h, x:x + w])
            cv2.putText(frame, str(folder), (x, y + h), font, 2, 255)
            f = cv2.resize(gray[y:y + h, x:x + h], (500, 500))
        cv2.imshow("camera", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    camera.release()
    cv2.destroyAllWindows()

def main():
    n=0
    while(n!=4):
        print("\n\t\t\t\tFACE DETECTION\n\n 1) Detect Face\n\n 2) Train Face\n\n 3) Recognise Face\n\n 4) Exit\n\n")
        n=int(input(' Enter your Choice : '))
        if(n==1):
            detect()
        elif(n==2):
            trainer()
        elif(n==3):
            recognise()
        elif n==4:
            print("\n About to Terminate")
        else:
            print("\n Wrong Option Selected, Please try again ...")
    camera=cv2.VideoCapture()
    camera.release()
    cv2.destroyAllWindows()
if __name__=="__main__":
    main()

